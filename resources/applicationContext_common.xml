<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.1.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd"
	default-autowire="byName" default-lazy-init="false">
	
	<context:component-scan base-package="com.yun.yweb" ></context:component-scan>
	
	<bean id="springContextUtil" class="com.yun.framework.mybatis.util.SpringContextUtil" />
	
     <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>   
    
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.connection.url}" />
		<property name="username" value="${jdbc.connection.username}" />
		<property name="password" value="${jdbc.connection.password}" />

		<property name="initialSize" value="${jdbc.connection.initialSize}" />
		<property name="maxActive" value="${jdbc.connection.maxActive}" />
		
		<property name="maxIdle" value="${jdbc.connection.maxIdle}" />
		
		<property name="minIdle" value="${jdbc.connection.minIdle}" />
		<property name="maxWait" value="60000" />

		<property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" />
		<property name="filters" value="mergeStat" /> -->
	</bean>

    
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis_config.xml"/>
		<property name="mapperLocations">
			<list>
				<!-- 表示在mybatis/sqlmap包或以下所有目录中，以*.xml结尾所有文件 -->
				<value>classpath:com/yun/yweb/*/sqlmap/**/*.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 定义 SqlSessionTemplate模版 可以批处理的 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean> 
	
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yun.yweb.*.dao"></property>
        <property name="annotationClass" value="org.springframework.stereotype.Repository"/> 
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean> -->

	
	<!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    

    <task:executor id="myExecutor" pool-size="10" />   
	<task:annotation-driven executor="myExecutor" /> 
       
	<!--   配置事务的传播特性 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>  
        	<tx:method name="add*" propagation="REQUIRED" rollback-for="Throwable"/>  
        	<tx:method name="edit*" propagation="REQUIRED" rollback-for="Throwable"/> 
        	<tx:method name="del*" propagation="REQUIRED" rollback-for="Throwable"/>
        	<tx:method name="insert*" propagation="REQUIRED" rollback-for="Throwable"/> 
        	<tx:method name="update*" propagation="REQUIRED" rollback-for="Throwable"/> 
        	<tx:method name="remove*" propagation="REQUIRED" rollback-for="Throwable"/>
        	<tx:method name="approve*" propagation="REQUIRED" rollback-for="Throwable"/>
        	<tx:method name="settle*" propagation="REQUIRED" rollback-for="Throwable"/>
        	<tx:method name="*" read-only="true"/>        
       </tx:attributes>  
   </tx:advice>
   <aop:config>  
    	<aop:pointcut id="serviceMethod"  
        	expression="execution(* com.yun.yweb..service..*.*(..))" />  
    	<aop:advisor pointcut-ref="serviceMethod"  
        	advice-ref="txAdvice" />  
	</aop:config>
    
	
</beans>
